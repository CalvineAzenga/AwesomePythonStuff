from tkinter import *
from tkinter import ttk
import time
import socket
import threading
import time
from tabulate import tabulate

comp_name = socket.gethostname()
comp_ip = socket.gethostbyname(comp_name)
all_connections = []
all_addresses = []
buffer_size = 8192 * 2
FLAG = 0
connection = None
runnind_dog = b'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'

icon=b''

dev_det = tabulate(
    [[
        "Developed by Calvoo softwares\nCalvine Museywa Azenga\nmuscalazems@gmail.com\n+254700666848\nCopyright @ 2020"]],
    tablefmt='pretty')
help_commands = '''ASSOC          Displays or modifies file extension associations.
ATTRIB         Displays or changes file attributes.
BREAK          Sets or clears extended CTRL+C checking.
BCDEDIT        Sets properties in boot database to control boot loading.
CACLS          Displays or modifies access control lists (ACLs) of files.
CALL           Calls one batch program from another.
CD             Displays the name of or changes the current directory.
CHCP           Displays or sets the active code page number.
CHDIR          Displays the name of or changes the current directory.
CHKDSK         Checks a disk and displays a status report.
CHKNTFS        Displays or modifies the checking of disk at boot time.
CLS            Clears the screen.
CMD            Starts a new instance of the Windows command interpreter.
COLOR          Sets the default console foreground and background colors.
COMP           Compares the contents of two files or sets of files.
COMPACT        Displays or alters the compression of files on NTFS partitions.
CONVERT        Converts FAT volumes to NTFS.  You cannot convert the
               current drive.
COPY           Copies one or more files to another location.
DATE           Displays or sets the date.
DEL            Deletes one or more files.
DIR            Displays a list of files and subdirectories in a directory.
DISKPART       Displays or configures Disk Partition properties.
DOSKEY         Edits command lines, recalls Windows commands, and
               creates macros.
DRIVERQUERY    Displays current device driver status and properties.
ECHO           Displays messages, or turns command echoing on or off.
ENDLOCAL       Ends localization of environment changes in a batch file.
ERASE          Deletes one or more files.
EXIT           Quits the CMD.EXE program (command interpreter).
FC             Compares two files or sets of files, and displays the
               differences between them.
FIND           Searches for a text string in a file or files.
FINDSTR        Searches for strings in files.
FOR            Runs a specified command for each file in a set of files.
FORMAT         Formats a disk for use with Windows.
FSUTIL         Displays or configures the file system properties.
FTYPE          Displays or modifies file types used in file extension
               associations.
GOTO           Directs the Windows command interpreter to a labeled line in
               a batch program.
GPRESULT       Displays Group Policy information for machine or user.
GRAFTABL       Enables Windows to display an extended character set in
               graphics mode.
HELP           Provides Help information for Windows commands.
ICACLS         Display, modify, backup, or restore ACLs for files and
               directories.
IF             Performs conditional processing in batch programs.
LABEL          Creates, changes, or deletes the volume label of a disk.
MD             Creates a directory.
MKDIR          Creates a directory.
MKLINK         Creates Symbolic Links and Hard Links
MODE           Configures a system device.
MORE           Displays output one screen at a time.
MOVE           Moves one or more files from one directory to another
               directory.
OPENFILES      Displays files opened by remote users for a file share.
PATH           Displays or sets a search path for executable files.
PAUSE          Suspends processing of a batch file and displays a message.
POPD           Restores the previous value of the current directory saved by
               PUSHD.
PRINT          Prints a text file.
PROMPT         Changes the Windows command prompt.
PUSHD          Saves the current directory then changes it.
RD             Removes a directory.
RECOVER        Recovers readable information from a bad or defective disk.
REM            Records comments (remarks) in batch files or CONFIG.SYS.
REN            Renames a file or files.
RENAME         Renames a file or files.
REPLACE        Replaces files.
RMDIR          Removes a directory.
ROBOCOPY       Advanced utility to copy files and directory trees
SET            Displays, sets, or removes Windows environment variables.
SETLOCAL       Begins localization of environment changes in a batch file.
SC             Displays or configures services (background processes).
SCHTASKS       Schedules commands and programs to run on a computer.
SHIFT          Shifts the position of replaceable parameters in batch files.
SHUTDOWN       Allows proper local or remote shutdown of machine.
SORT           Sorts input.
START          Starts a separate window to run a specified program or command.
SUBST          Associates a path with a drive letter.
SYSTEMINFO     Displays machine specific properties and configuration.
TASKLIST       Displays all currently running tasks including services.
TASKKILL       Kill or stop a running process or application.
TIME           Displays or sets the system time.
TITLE          Sets the window title for a CMD.EXE session.
TREE           Graphically displays the directory structure of a drive or
               path.
TYPE           Displays the contents of a text file.
VER            Displays the Windows version.
VERIFY         Tells Windows whether to verify that your files are written
               correctly to a disk.
VOL            Displays a disk volume label and serial number.
XCOPY          Copies files and directory trees.
WMIC           Displays WMI information inside interactive command shell.'''


class GuiRs:
    def __init__(self):
        self.root = Tk()
        self.root.title("")
        ui = PhotoImage(data=icon)

        self.root.iconphoto(False, ui)
        self.root.geometry("1080x650")
        self.root.resizable(width=1, height=1)
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        app_height = self.root.winfo_height()
        app_width = self.root.winfo_width()

        x_loc = int(screen_width / 2) - int(app_width / 2)
        y_loc = int(screen_height / 2) - int(app_height / 2)

        self.root.geometry("+{}+{}".format(x_loc, y_loc))

        def create_socket():
            try:
                global host
                global port
                global s
                global comp_ip, comp_name
                host = socket.gethostname()
                port = 9999
                s = socket.socket()

            except socket.error as msg:
                # print("Socket creation error: " + str(msg))
                currentdata = cmd.get(1.0, END)
                cmd.delete(1.0, END)
                cmd.insert(1.0, currentdata + "Socket creation error: " + str(msg) + "\n")
                cmd.see('end')

        def socket_bind():
            try:
                global host
                global port
                global s
                s.bind(('0.0.0.0', port))
                try:
                    frame_cnt = 0
                    # frames = [PhotoImage(file='Anieyes.gif', format='gif -index %i' % (i)) for i in range(frame_cnt)]
                    frames = []
                    while 1:
                        try:
                            frame = PhotoImage(data=runnind_dog, format='gif -index %i' % (frame_cnt))
                            frames.append(frame)
                            frame_cnt += 1
                            pass
                        except:
                            # print("Number of frames: " + str(frame_cnt))
                            break

                    def updet(ind):
                        frame = frames[ind]
                        ind += 1
                        if ind == frame_cnt:
                            ind = 0
                        lbl_server_running.configure(image=frame)
                        self.root.after(100, updet, ind)
                except:
                    pass
                s.listen(5)
            except socket.error as msg:
                # print("Socket binding error: " + str(msg))
                cmd.configure(state='normal')
                currentdata = cmd.get(1.0, END)
                cmd.delete(1.0, END)
                cmd.insert(1.0, currentdata + "Socket binding error: " + str(msg) + "\n")
                cmd.see('end')
                cmd.configure(state='disabled')
                time.sleep(1)
                socket_bind()
            updet(0)

        def accept_connections():
            for c in all_connections:
                c.close()
            del all_connections[:]
            del all_addresses[:]
            # print( "\nIf connection has been established, type 'list' first then 'select e.g select 0 to select a
            # connection'")
            cmd.configure(state='normal')
            currentdata = cmd.get(1.0, END)
            cmd.delete(1.0, END)
            cmd.insert(1.0, currentdata + "\nIf a connection has been established, type 'list' first then 'select e.g "
                                          "select 0 to select a connection" + "\n")
            cmd.see('end')
            cmd.configure(state='disabled')
            while 1:
                try:
                    conn, address = s.accept()
                    conn.setblocking(1)
                    all_connections.append(conn)
                    all_addresses.append(address)
                    # print("\nConnection has been established: " + address[0])
                    cmd.configure(state='normal')
                    currentdata = cmd.get(1.0, END)
                    cmd.delete(1.0, END)
                    cmd.insert(1.0, currentdata + "\nConnection has been established: " + address[0] + "\n")
                    list_connections()
                    cmd.see('end')
                    cmd.configure(state='disabled')
                except:
                    # print("Error accepting connections")
                    cmd.configure(state='normal')
                    currentdata = cmd.get(1.0, END)
                    cmd.delete(1.0, END)
                    cmd.insert(1.0, currentdata + "Error accepting connections" + "\n")
                    cmd.see('end')
                    cmd.configure(state='disabled')

        # Interactive prompt for sending remotely

        def start_cally():
            global connection
            # cmd = input('CMAServer-> ')
            cmd = cmd_entry.get()
            if cmd == 'start server':
                startServer()
            elif cmd == 'list':
                list_connections()
            elif 'select' in cmd:
                connection = get_target(cmd)
            else:
                if connection is not None:
                    send_target_commands(connection)

        # Displays all current connections

        def list_connections():
            results = ''
            for i, conn in enumerate(all_connections):
                try:
                    conn.send(str.encode(' ', encoding="cp1252", errors='ignore'))
                    conn.recv(buffer_size)
                except:
                    del all_connections[i]
                    del all_addresses[i]
                    continue
                results += str(i) + '    ' + str(all_addresses[i][0]) + '   ' + str(all_addresses[i][1]) + '\n'
            # print('----------Clients------------' + '\n' + results)
            cmd.configure(state='normal')
            currentdata = cmd.get(1.0, END)
            cmd.delete(1.0, END)
            cmd.insert(1.0, currentdata + '----------Clients------------' + '\n' + results + "\n")
            cmd.see('end')
            cmd.configure(state='disabled')

        # Select target client
        def get_target(cmdd):
            try:
                target = str(cmd_entry.get()).replace('select ', '')
                target = int(target)
                conn = all_connections[target]
                # print("You are now connected to " + str(all_addresses[target][0]))
                # print('CMAServer >> ' + str(all_addresses[target][0]) + '-> ', end="")
                cmd.configure(state='normal')
                currentdata = cmd.get(1.0, END)
                cmd.delete(1.0, END)
                cmd.insert(1.0, currentdata + "You are now connected to " + str(
                    all_addresses[target][0]) + '\nCMAServer >> ' + str(all_addresses[target][0]) + '-> ' + "\n")
                cmd.see('end')
                cmd.configure(state='disabled')
                return conn
            except Exception as msg:
                # print("Not a valid selection")
                cmd.configure(state='normal')
                currentdata = cmd.get(1.0, END)
                cmd.delete(1.0, END)
                cmd.insert(1.0, currentdata + "Not a valid selection " + str(msg) + "\n")
                cmd.see('end')
                cmd.configure(state='disabled')
                return None

        # Connect with remote target client

        def send_target_commands(conn):
            try:
                # cmd = input()
                cmdd = cmd_entry.get()
                if len(str.encode(cmdd)) > 0:
                    conn.send(str.encode(cmdd, encoding="cp1252", errors='ignore'))
                    client_response = str(conn.recv(buffer_size), "cp1252", errors='ignore')
                    # print(client_response, end="")
                    cmd.configure(state='normal')
                    currentdata = cmd.get(1.0, END)
                    cmd.delete(1.0, END)
                    cmd.insert(1.0, currentdata + str(client_response) + "\n\n")
                    cmd.see('end')
                    cmd.configure(state='disabled')
                if cmd == 'quit':
                    pass
            except:
                # print("Connection was lost")
                cmd.configure(state='normal')
                currentdata = cmd.get(1.0, END)
                cmd.delete(1.0, END)
                cmd.insert(1.0, currentdata + "Connection was lost " + "\n")
                cmd.see('end')
                cmd.configure(state='disabled')
                pass

        def startServer():
            create_socket()
            socket_bind()
            thr = threading.Thread(target=accept_connections)
            thr.daemon = True
            thr.start()

        def start_callythred(event):
            thr = threading.Thread(target=start_cally)
            thr.daemon = True
            thr.start()

        def focusEntry():
            comp_name = socket.gethostname()
            comp_ip = socket.gethostbyname(comp_name)
            lbl_computer_name1.configure(text=comp_name)
            lbl_computer_ip1.configure(text=comp_ip)
            self.root.after(10000, focusEntry)

        def save_last_pos(event):
            global lastClickX, lastClickY
            lastClickX = event.x
            lastClickY = event.y

        def dragging(event):
            x, y = event.x - lastClickX + self.root.winfo_x(), event.y - lastClickY + self.root.winfo_y()
            self.root.geometry("+{0}+{1}".format(x, y))

        def close_window(event):
            lblclose.config(fg='red')
            time.sleep(0.3)
            self.root.destroy()

        def minimize_window(event):
            self.root.overrideredirect(0)
            lblclose.config(fg='red')
            self.root.iconify()

        def winfocuse():

            # print(self.root.state())

            if self.root.state() == 'normal':
                self.root.overrideredirect(1)
            self.root.after(1, winfocuse)

        def popUpMenu(event=None):
            def copy():
                self.root.clipboard_clear()
                self.root.clipboard_append(cmd.selection_get())

            def copy_all():
                self.root.clipboard_clear()
                self.root.clipboard_append(cmd.get(1.0, END))

            try:
                if cmd.selection_get() != "":
                    popup = Menu(cmd, font=("Arial", 9), tearoff=False, bg='beige', fg='#2B2B2B')
                    popup.add_command(label='Copy selected', command=copy)
                    popup.add_separator()
                    popup.add_command(label='Copy all', command=copy_all)

                    popup.post(event.x_root, event.y_root)

            except:
                pass

        app_bar = Canvas(self.root, bg='#171334')
        app_bar.place(relx=0, rely=0, relheight=0.15, relwidth=1)

        app_logo = PhotoImage(data=icon)

        logo_canvas = Canvas(app_bar)
        logo_canvas.create_image(101, 1, anchor=NE, image=app_logo)
        logo_canvas.place(relx=0, rely=0)

        lbl_server_running = Label(app_bar)
        lbl_server_running.place(relx=0.1, rely=0.01)

        lblclose = Label(app_bar, text="X", bg="#171334", fg="red", font=("Consolas", 17, 'bold'))
        lblclose.place(rely=0.001, relx=0.97)

        lblminimize = Label(app_bar, text="-", bg="#171334", fg="lime", font=("Consolas", 17))
        lblminimize.place(rely=0.001, relx=0.94)

        app_canvas = Frame(self.root, bg='#011838')
        app_canvas.place(relx=0, rely=0.15, relheight=0.85, relwidth=1)
        # lbl_developer = Label(app_canvas, justify=LEFT, text='Calvoo '
        #                                                     'Softwares | muscalazems@gmail.com | '
        #                                                     '+254700666848\nCopyright @ '
        #                                                     '2020', bg='#011838', fg='grey', font=("Arial", 11))
        # lbl_developer.place(relx=0.55, rely=0.01)

        lbl_computer_name = Label(app_canvas, fg='grey', text='Computer Name:', bg='#011838', font=("Arial", 13))
        lbl_computer_name.place(relx=0, rely=0.01)

        lbl_computer_ip = Label(app_canvas, fg='grey', text='Computer IP:', bg='#011838', font=("Arial", 13))
        lbl_computer_ip.place(relx=0, rely=0.06)

        lbl_computer_name1 = Label(app_canvas, text=comp_name, fg='green', bg='#011838', font=("Arial", 13))
        lbl_computer_name1.place(relx=0.12, rely=0.01)

        lbl_computer_ip1 = Label(app_canvas, text=comp_ip, fg='green', bg='#011838', font=("Arial", 13))
        lbl_computer_ip1.place(relx=0.1, rely=0.06)

        connected_users_notebook = ttk.Notebook(app_canvas)
        user_frame = Frame(connected_users_notebook, bg='silver')
        user_frame.pack(fill=BOTH)

        connected_users_notebook.add(user_frame, text="Commands")
        connected_users_notebook.place(relwidth=0.25, relheight=0.85, relx=0.745, rely=0.12)

        connection_command1 = Label(user_frame, fg='#171334', text="1. start server", bg='#C0C0C0',
                                    font=("Arial", 12))
        connection_command1.place(relx=0, rely=0.005)
        connection_command2 = Label(user_frame, fg='#171334', text="2. list -> to list connections", bg='#C0C0C0',
                                    font=("Arial", 12))
        connection_command2.place(relx=0, rely=0.06)
        connection_command1 = Label(user_frame, fg='#171334', text="3. select e.g select 1", bg='#C0C0C0',
                                    font=("Arial", 12))
        connection_command1.place(relx=0, rely=0.115)

        windows_commands_lbl = Label(user_frame, fg='#171334', justify=LEFT,
                                     text="Once you have selected a connection, \nit's time "
                                          "to control the client(s) with the\nnormal "
                                          "Windows OS commands.\n\nExamples", bg='#C0C0C0',
                                     font=("Arial", 12))
        windows_commands_lbl.place(relx=0, rely=0.2)

        windows_commands_text = Text(user_frame, wrap='none', relief=SUNKEN, bd=5)
        windows_commands_text.place(relx=0, rely=0.42, relwidth=1, relheight=0.58)
        windows_commands_text.insert(1.0, help_commands)
        command_scrollbar = Scrollbar(windows_commands_text, cursor='heart', troughcolor="silver", bg="#2B2B2B")
        command_scrollbar.pack(side=RIGHT, fill=Y)
        command_scrollbar.config(command=windows_commands_text.yview)
        windows_commands_text.config(yscrollcommand=command_scrollbar.set)

        command_scrollbar1 = Scrollbar(windows_commands_text, orient=HORIZONTAL, cursor='heart', troughcolor="silver",
                                       bg="#2B2B2B")
        command_scrollbar1.pack(side=BOTTOM, fill=X)
        command_scrollbar1.config(command=windows_commands_text.xview)
        windows_commands_text.config(xscrollcommand=command_scrollbar1.set)
        windows_commands_text.configure(state='disabled')

        cmd = Text(app_canvas, bg='black', font=("Consolas", 11))
        cmd.insert(1.0, dev_det)
        cmd.place(relx=0.005, rely=0.12, relheight=0.85, relwidth=0.73)
        cmd.config(wrap='word', state='normal', fg='silver', insertofftime=0,
                   highlightthickness=0, relief=SUNKEN, bd=1)
        cmd.see('end')
        cmd.bind('<Button-3>', popUpMenu)

        cmd_entry = Entry(cmd, bd=0, bg='black', fg='green', font=("Consolas", 12))
        cmd_entry.place(relx=0.11, rely=0.95, relwidth=0.865)
        cmdlbl = Label(cmd, bg='black', fg='silver', text='CMAServer >> ')
        cmdlbl.place(relx=0, rely=0.95)
        cmd_entry.focus_force()
        cmd_entry.bind('<Return>', start_callythred)

        scroll_bar1 = Scrollbar(cmd, cursor='heart', troughcolor="silver", bg="#2B2B2B")
        scroll_bar1.pack(side=RIGHT, fill=Y)
        cmd.focus_set()
        scroll_bar1.config(command=cmd.yview)
        cmd.config(yscrollcommand=scroll_bar1.set)
        cmd.configure(state='disabled')

        self.root.tk_setPalette('#171334')

        lblclose.bind('<Button-1>', close_window)
        lblminimize.bind('<Button-1>', minimize_window)
        app_bar.bind('<Button-1>', save_last_pos)
        app_bar.bind('<B1-Motion>', dragging)
        self.root.overrideredirect(1)
        self.root.attributes("-topmost", 1)
        winfocuse()
        focusEntry()
        # cmd.bind('<Key>', 'break')
        self.root.mainloop()


if __name__ == '__main__':
    GuiRs()
