from tkinter import Canvas, Label, Listbox, PhotoImage, StringVar, Text, Tk, filedialog, font, ttk,Button
from ttkbootstrap import Style
from win32api import GetSystemMetrics, NameUnknown # Used to get  the screen size
from PIL import Image,ImageTk
import time
from chatbot_ui import ChatBotUI
import random
from chartsplot import plotCharts,plotMeters
from nicebtns import image_file_to_bytes

orange64 = 'iVBORw0KGgoAAAANSUhEUgAAAiIAAADLCAMAAABkvgh7AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAANtvJ99sId5tIt5uI91tJNxuJNxuJttvKN90NN91Ntt3PN52ONx3Otx3PNt4Pdp4Ptx4PepfD+pfEOtgD+piD+tkD+ttD+dnFOdoE+doFOVoFuNqG+JrHOFrHuFsHuRpGORpGuRqGORqGupgEOpiEOpkEOlmEOhnEupoEOpoEupqFettEetsF+tuFOxqFetrGOtsGetvHOxrGOxsGOxtGuxuG+xuHexxFutwH+xxGOxyGOxyGuxxHuBsIOJvJ+NvKORvKONwKeNwKuJxLONyLeJyLuRwKeRwKuRxLOtxIexyIexzJOx0JOx1Ju11KOx2KOx2Kux5Iux4Kux5Le1/LeFyMOFzMuB0NOB1Nux7MOx8MOx8Mu19NO1+NO1+Ntd7RdV8RtN+S9J/TdF/TtV9SNR9Stl5QNl6Qdh6Qth7RK+Tfa+Tfq6Ufr+JZb+JZr+KZ7uMbr6KaL6LaryMbLyNb7yOb7WPdLuNcLqOcLmOcrmPdLOQd7SQdrKReLKRerGSerCTfLCTfrmQde2AN+2AOO2BOu2COu6DPO6EPe6EPsWDV8OFXcOFXsOGXcOGXsaDWMSEWsqCVs+AUM2AUs6CU82CVMqDWMmEWtCAT9CAUMKHYMCIYsCIZMCKZu6FQO6GQe6GQu6HRO6IRe6JRu6KR+6KSO+LSu+MS++MTO+OTe+OTu+OUO+RUu+TVfCNTvCOTvCPUPCQUfCQUvCSU/CRVPCSVPCSVvCUV/CUWPCVWvGWWvGXXPGYXvCWYPGaYfGcYvGcZPKdZvKeZ/GdavKeaPKebfKebvKgavKhbPKibfGibvKjcPGkcfKmdPKiePOod/OpePSpePSqevSrfPSsfPSsfvSqg/SugfWwgvWwhPWyhfWyhvWxi/Wyj/W0ifW2jfa4j/a1kPW2kva2lfW2lvW4kPa6kfa7kva5lvW7lPa8lPW8lve+l/a4mva5nPa6nPa7nva+mPa+mva/nPa8oPa9ovbAm/bAnfXAnvbCofbEo/XGp/bGqPbIqQAAAC/NnaUAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGHRFWHRTb2Z0d2FyZQBwYWludC5uZXQgNC4xLjFjKpxLAAAJXElEQVR4Xu3de3zVdR3H8Xb9/sJh60LlOTtubdIZEyckSdedMzkdZyRGIePmZdqki8s0KllJmtGCTAXRlUAyrireUeZga2JRkooYRWR0JbXMLsIqZ5fT7/L5nRvj9/md0/fhw/Px/fyHP+D33fb4vPj+LvsxXpMA8IREgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgIFEgJF7Ih1Xf3bVsuu/AYXu+mUrL+u8iqbqIcdErvhme0V8SjQCIpwWe+0nli+k2R5NTolc0jYzqpQBcigV+UDltZ57SQ6JfLqyRRXRyiCIis7u7qAhj8B3Ip1tLdg/pFLR0Z+hOR/JbyIrWxGIZCp289E2Ep+J3HzEFqLKy0qhUJUfeUkZnf8lGnYWX4l0tDfTOg5VEqoJNNTXh6EgmaMLBKuaymmcJFLRSfPO5CuRtgitYisPBehDQUFrqC3O2EtUxRdo4Bn8JHJhlNawlNZh85Aj2JQeiRp9JY08nY9Euk+nFUwq1ECLgww1ZTRaS+R8mnk6PpEF8dTDkNIgLQxiHFdNw7U0d9PU07CJdLw+tRUVpy5Cxo19+bz9lYI+n5cNfdhcjWGZf2jsCTTJcDiUmnBR/HKaewqbSHfqQqSJrkLGvuuctZu3jOgBD1u99B7Fg6a+Vwrrk8kNfRX+0XE2+qg527adsc38M723d01yK3lbqhH1SZp7CpfIolnJw4udQk44ddPOn/3q6b+M6K8+/c2vF+jXVw29X/ALI7N+Z3jome+f/QZ7pOG6VCMtl9Dkk7hElifvd0uPs1cb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'
green_pill64 = ''
red_pill64 = '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'
button64 = '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'


screen_width_main = GetSystemMetrics(0)
screen_width = screen_width_main
screen_height_main = GetSystemMetrics(1)
screen_height = screen_height_main

if screen_width_main > 1366:
    screen_width = 1366
if screen_height_main > 768:
    screen_height = 768


window=Tk() # Creating the window
window.overrideredirect(1) # to remove top bar of window- just for aesthetic purposes
window.geometry(f"{screen_width}x{screen_height}")
window.resizable(width=False,height=False)
window.wm_attributes("-topmost",True)
window.tk_setPalette('beige')
window.title("HEALTHBOT AI")


style=ttk.Style(window)
style.theme_use('clam')
style.configure('TButton',font=("Raleway",13),background='beige',foreground='#2b2b2b')
style.configure('TLabel',background='beige')
style.configure('TFrame',background='beige',foreground='#2b2b2b')

# To center the window
try:
    icon=PhotoImage(master=window,height=16,width=16)
    icon.blank()
    icon.transparency_set(0,0,0)
    window.wm_iconphoto(False,icon)
    window.resizable(width=0, height=0)
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    app_height = window.winfo_height()
    app_width = window.winfo_width()

    x_loc = int(screen_width / 2) - int(app_width / 2)
    y_loc = int(screen_height / 2) - int(app_height / 2)

    window.geometry("+{}+{}".format(x_loc, y_loc))
except:
    pass


# Colors
main_color='#282C34'
main_color='#2C313C'
title_color='orange'
def resize_image(image,size):
    img=Image.open(image)
    img=img.resize(size,Image.ANTIALIAS)
    img=ImageTk.PhotoImage(img)
    return img

# Images
img_settings=resize_image("./icons/applications-system.png",(64,64))
img_training=resize_image("./icons/application-x-addon.png",(64,64))
img_data=resize_image("./icons/document-open.png",(64,64))
img_chat=resize_image("./icons/user-available.png",(40,40))
img_send=resize_image("./icons/go-next.png",(33,35))
img_listen=resize_image("./icons/microphone-sensitivity-high.png",(33,30))
img_dashboard=resize_image("./icons/x-office-spreadsheet.png",(64,50))
img_commit=resize_image("./icons/database.png",(40,40))
img_db_check=ImageTk.PhotoImage(image_file_to_bytes(green_pill64,(200,50)),master=window)
img_db_clean=ImageTk.PhotoImage(image_file_to_bytes(red_pill64,(200,50)),master=window)
img_db_backup=ImageTk.PhotoImage(image_file_to_bytes(orange64,(280,50)),master=window)
img_db_check=ImageTk.PhotoImage(image_file_to_bytes(green_pill64,(200,50)),master=window)
img_db_select=ImageTk.PhotoImage(image_file_to_bytes(green_pill64,(200,50)),master=window)

app_bar=ttk.Label(window,background=main_color)
app_bar.place(relx=0,rely=0,relwidth=1,relheight=0.15)

title_lbl=ttk.Label(app_bar,text='HEALTHBOT AI',font=("Algerian",22),background=main_color,foreground=title_color)
title_lbl.pack(side='left',padx=7,pady=0)

time_lbl=ttk.Label(app_bar,text=12345,background=main_color,font=("Raleway",12),foreground="orange")
time_lbl.pack(side='bottom',anchor='e',padx=80,pady=10)

close_lbl=ttk.Label(app_bar,text='X',font=("Raleway",18),background=main_color,foreground='beige')
close_lbl.pack(side='right',anchor='n',padx=10,pady=9)

minimize_lbl=ttk.Label(app_bar,text='__',font=("Raleway",14),background=main_color,foreground='beige')
minimize_lbl.pack(side='right',anchor='n',padx=7,pady=0)

# Body Panes

# Left Pane
options_pane=ttk.Label(window,background='beige')
options_pane.place(relx=0,rely=0.15,relwidth=0.7,relheight=0.85)

dashboard_pane=ttk.Label(options_pane,background='beige')
dashboard_pane.place(relx=0,rely=0,relwidth=1,relheight=1)



settings_pane=ttk.Label(dashboard_pane,background='beige')
settings_pane.place(relx=0,rely=0,relwidth=1,relheight=0.8)

training_pane=ttk.Label(dashboard_pane,background='indigo')
training_pane.place(relx=0,rely=0,relwidth=1,relheight=0.8)

data_entry_pane=ttk.Label(dashboard_pane,background='orange')
data_entry_pane.place(relx=0,rely=0,relwidth=1,relheight=0.8)

dashboard_pane_top=ttk.Label(dashboard_pane,background='beige')
dashboard_pane_top.place(relx=0,rely=0,relwidth=1,relheight=0.8)

dashboard_pane_top_left=ttk.Label(dashboard_pane_top,background='beige')
dashboard_pane_top_left.place(relx=0,rely=0,relwidth=0.3,relheight=0.989)

#Dashboard Buttons
dashboard_total_trained_models_btn=ttk.Label(dashboard_pane_top_left,justify='center',text="[53]\nTrained Models",anchor='center',foreground='#2b2b2b',background='#A5D0ED',font=("Verdana",12))
dashboard_total_trained_models_btn.place(relx=0.05,rely=0.02,relheight=0.2,relwidth=0.9)

def enter1(event):
    dashboard_total_trained_models_btn.configure(background='#69A4CD')
def leave1(event):
    dashboard_total_trained_models_btn.configure(background='#A5D0ED')
dashboard_total_trained_models_btn.bind("<Enter>",enter1)
dashboard_total_trained_models_btn.bind("<Leave>",leave1)

dashboard_total_loaded_diseases_btn=ttk.Label(dashboard_pane_top_left,justify='center',text="[96]\nLoaded Diseases",anchor='center',foreground='#2b2b2b',background='#FFCD42',font=("Verdana",12))
dashboard_total_loaded_diseases_btn.place(relx=0.05,rely=0.24,relheight=0.2,relwidth=0.9)

def enter2(event):
    dashboard_total_loaded_diseases_btn.configure(background='#F9AD42')
def leave2(event):
    dashboard_total_loaded_diseases_btn.configure(background='#FFCD42')
dashboard_total_loaded_diseases_btn.bind("<Enter>",enter2)
dashboard_total_loaded_diseases_btn.bind("<Leave>",leave2)

dashboard_total_xray_trainings_btn=ttk.Label(dashboard_pane_top_left,justify='center',text="[3]\nX-Ray Trainings",anchor='center',foreground='#2b2b2b',background='#B4E783',font=("Verdana",12))
dashboard_total_xray_trainings_btn.place(relx=0.05,rely=0.46,relheight=0.2,relwidth=0.9)

def enter3(event):
    dashboard_total_xray_trainings_btn.configure(background='#9EC862')
def leave3(event):
    dashboard_total_xray_trainings_btn.configure(background='#B4E783')
dashboard_total_xray_trainings_btn.bind("<Enter>",enter3)
dashboard_total_xray_trainings_btn.bind("<Leave>",leave3)

dashboard_pane_top_right=ttk.Label(dashboard_pane_top,background='beige')
dashboard_pane_top_right.place(relx=0.3,rely=0,relwidth=0.7,relheight=0.989)

dashboard_pane_top_right_top=Label(dashboard_pane_top_right,anchor='center',background='beige',font=("Verdana",16),text="Covid 19 Virus Model Prediction Accuracy Growth")
dashboard_pane_top_right_top.place(relx=0,rely=0.1,relwidth=1,relheight=0.1)

dashboard_pane_top_right_bottom=ttk.Label(dashboard_pane_top_right,background='beige')
dashboard_pane_top_right_bottom.place(relx=0,rely=0.2,relwidth=1,relheight=0.8)

plotCharts(dashboard_pane_top_right_bottom)

sepating_line=ttk.Label(dashboard_pane,background='silver')
sepating_line.place(relx=0.01,rely=0.79,relwidth=0.98,relheight=0.005)

dashboard_pane_bottom=ttk.Label(dashboard_pane,background='beige')
dashboard_pane_bottom.place(relx=0,rely=0.8,relwidth=1,relheight=0.2)
dashboard_pane_bottom=ttk.Label(dashboard_pane_bottom,background='beige',anchor='center')
dashboard_pane_bottom.pack()
btn_settings=ttk.Button(dashboard_pane_bottom,text="Settings",compound='top',image=img_settings)
btn_settings.pack(side='left',padx=5,pady=5)

btn_training=ttk.Button(dashboard_pane_bottom,text="Training",compound='top',image=img_training)
btn_training.pack(side='left',padx=5,pady=5)

btn_data=ttk.Button(dashboard_pane_bottom,text="Data Entry",compound='top',image=img_data)
btn_data.pack(side='left',padx=5,pady=5)

# Settings Pane Controls

settings_voice_lbl=ttk.Label(settings_pane,text="Change Voice",font=("Verdana",13),background="beige",foreground="#2b2b2b")
settings_voice_lbl.grid(row=0,column=0,padx=10,pady=10,sticky='w')
settings_voice_cmb=ttk.Combobox(settings_pane,width=13,foreground="indigo",state="readonly",font=("Verdana",12))
settings_voice_cmb.grid(row=0,column=0,sticky='e')
settings_voice_cmb['values']=['','Microsoft David','Microsoft Zira']

settings_voice_options_lbl=ttk.Label(settings_pane,text="Voice Options",font=("Verdana",13,"underline"),background="beige",foreground="#2b2b2b")
settings_voice_options_lbl.grid(row=1,column=0,padx=10,pady=20,sticky='w')

style.configure("TCheckbutton",font=("Verdana",11),background="beige",foreground="#2b2b2b")
style.configure("TRadiobutton",font=("Verdana",11),background="beige",foreground="#2b2b2b")

radio_btn_value=StringVar(window)

settings_voice_option_1_check=ttk.Radiobutton(settings_pane,text="Voice Recognition Always on",value="RAlways",variable=radio_btn_value)
settings_voice_option_1_check.grid(row=2,column=0,padx=20,sticky='w')

settings_voice_option_2_check=ttk.Radiobutton(settings_pane,text="Voice Recognition Off",value="Roff",variable=radio_btn_value)
settings_voice_option_2_check.grid(row=3,column=0,padx=20,sticky='w')

settings_voice_option_3_check=ttk.Radiobutton(settings_pane,text="Voice Recognition on Connection",value="RConn",variable=radio_btn_value)
settings_voice_option_3_check.grid(row=4,column=0,padx=20,sticky='w')

radio_btn_value1=StringVar(window)
separeta=ttk.Label(settings_pane,background="beige",text=" "*45,font=("Raleway",15,"underline"))
separeta.grid(row=5,column=0,padx=20,sticky='w',pady=10)
settings_voice_option_4_radio=ttk.Radiobutton(settings_pane,text="Text to speech ON",value="on",variable=radio_btn_value1)
settings_voice_option_4_radio.grid(row=6,column=0,padx=20,sticky='w')

settings_voice_option_5_radio=ttk.Radiobutton(settings_pane,text="Text to speech OFF",value="off",variable=radio_btn_value1)
settings_voice_option_5_radio.grid(row=7,column=0,padx=20,sticky='w')

settings_checkdb_btn=Button(settings_pane,text="Check Database",bd=0,activeforeground="orange",foreground="#2b2b2b",activebackground='beige',font=("Verdana",13),image=img_db_check,compound='center')
settings_checkdb_btn.grid(row=8,column=0,padx=5,sticky='e',pady=20)

settings_cleandb_btn=Button(settings_pane,text="Clean Database",bd=0,activeforeground="orange",foreground="#2b2b2b",activebackground='beige',font=("Verdana",13),image=img_db_clean,compound='center')
settings_cleandb_btn.grid(row=8,column=1,padx=5,sticky='w',pady=20)

settings_backupdb_btn=Button(settings_pane,text="Backup Database & Models",bd=0,activeforeground="orange",foreground="#2b2b2b",activebackground='beige',font=("Verdana",13),image=img_db_backup,compound='center')
settings_backupdb_btn.grid(row=8,column=2,padx=5,sticky='e',pady=20)

settings_selectdb_btn=Button(settings_pane,text="Select Db",bd=0,activeforeground="orange",foreground="#2b2b2b",activebackground='beige',font=("Verdana",13),image=img_db_select,compound='center')
settings_selectdb_btn.grid(row=9,column=0,padx=5,sticky='e',pady=20)

settings_modelsfolder_btn=Button(settings_pane,text="Models Folder",bd=0,activeforeground="orange",foreground="#2b2b2b",activebackground='beige',font=("Verdana",13),image=img_db_check,compound='center')
settings_modelsfolder_btn.grid(row=9,column=1,padx=5,sticky='w',pady=20)

settings_dash_btn=ttk.Button(settings_pane,text="Back to Dashboard",compound='top',image=img_dashboard)
settings_dash_btn.place(relx=0.8,rely=0.8)











# Pane Training

# Notebook
training_notebook=ttk.Notebook(training_pane)
training_notebook.place(relx=0,rely=0,relheight=1,relwidth=1)

text_training_frame=ttk.Frame(training_notebook)
text_training_frame.pack(fill='both')

xray_training_frame=ttk.Frame(training_notebook)
xray_training_frame.pack(fill='both')
img_text=resize_image('./icons/gtk3-widget-factory.png',(30,30))
img_xray=resize_image('./icons/atom.png',(30,30))
training_notebook.add(text_training_frame,text='Data Training',compound='left',image=img_text)
training_notebook.add(xray_training_frame,text='X-Ray Training',compound='left',image=img_xray)

lbl_select_disease=ttk.Label(text_training_frame,text="Select Disease",background='beige',font=("Verdana",13),foreground="#2b2b2b")
lbl_select_disease.grid(row=0,column=0,padx=10,pady=5,sticky='w')

cmb_select_disease=ttk.Combobox(text_training_frame,font=("Verdana",13),width=21,foreground="#2b2b2b")
cmb_select_disease.grid(row=0,column=1,pady=5,padx=10,sticky='w')

lbl_input_sysmptoms=ttk.Label(text_training_frame,text="Enter Symptoms(newline)",background='beige',font=("Verdana",13),foreground="#2b2b2b")
lbl_input_sysmptoms.grid(row=1,column=0,padx=10,pady=5,sticky='nw')

txt_select_disease=Text(text_training_frame,font=("Verdana",13),border=5,relief='groove',background='white',width=22,height=9,foreground="grey")
txt_select_disease.grid(row=1,column=1,pady=5,padx=10,sticky='w')

lbl_enter_tests=ttk.Label(text_training_frame,text="Enter Tests",background='beige',font=("Verdana",13),foreground="#2b2b2b")
lbl_enter_tests.grid(row=2,column=0,padx=10,pady=5,sticky='nw')

txt_enter_tests=Text(text_training_frame,font=("Verdana",13),border=5,relief='groove',background='white',width=22,height=7,foreground="grey")
txt_enter_tests.grid(row=2,column=1,pady=10,padx=10,sticky='w')

btn_commit=ttk.Button(text_training_frame,text="COMMIT",compound='left',image=img_commit)
btn_commit.place(relx=0.8,rely=0.6)

settings_dash_btn1=ttk.Button(text_training_frame,text="Back to Dashboard",compound='top',image=img_dashboard)
settings_dash_btn1.place(relx=0.8,rely=0.8)

























horizontal_separator=ttk.Label(window,background='silver')
horizontal_separator.place(relx=0.6975,rely=0.151,relheight=0.84,relwidth=0.003)


# Right Pane
chatbot_pane=ttk.Label(window,background='#252526')
chatbot_pane.place(relx=0.7,rely=0.15,relwidth=0.3,relheight=0.85)

chatbot_pane_top=ttk.Label(chatbot_pane,background='#212D3B', text="Health Chatbot", font=("Raleway",15),foreground='#B4E783')
chatbot_pane_top.place(relx=0,rely=0,relwidth=1,relheight=0.1)

chatbot_pane_top_image=ttk.Label(chatbot_pane_top,background='#212D3B',compound='right',image=img_chat)
chatbot_pane_top_image.pack(side='right')

chatbot_pane_center=Canvas(chatbot_pane,relief='groove',highlightthickness=0,borderwidth=5,highlightbackground='#151E27',background='#151E27')
chatbot_pane_center.place(relx=0,rely=0.1,relwidth=1,relheight=0.8)

# def custom_yview(*args,**kwargs):
#     chatbot_pane_center.yview(*args,**kwargs)
#     x=chatbot_pane_center.canvasx(0)
#     y=chatbot_pane_center.canvasy(0)
#     chatbot_pane_center.coords("background",x,y)
# window.update()
# chat_width=chatbot_pane_center.winfo_width()
# chat_height=chatbot_pane_center.winfo_height()
# img_chat_background1=resize_image("images/clear.jpg",(chat_width,chat_height))
# chatbot_pane_center.create_image(0,0,image=img_chat_background1,anchor='nw',tags=("background",))

chatbot_pane_bottom=ttk.Label(chatbot_pane,background='#212D3B', text="", font=("Raleway",15),foreground='#B4E783')
chatbot_pane_bottom.place(relx=0,rely=0.9,relwidth=1,relheight=0.1)


thistext=Text(chatbot_pane_center,relief='groove', bd=0, height="8", width="50",font="Helvetica", wrap="word",background='#151E27')
thistext.place(relx=0.025,rely=0.02,relheight=0.96,relwidth=0.91)

chatbot_entry=Text(chatbot_pane_bottom,foreground='#2b2b2b',font=("consolas",15))
chatbot_entry.place(relx=0.01,rely=0.2,relwidth=0.7,relheight=0.6)

chat_window=ChatBotUI(chatbot_pane_center,chatbot_entry,thistext)

chatbot_pane_bottom_listen_btn=ttk.Label(chatbot_pane_bottom,background='#212D3B',cursor='hand2',compound='center',image=img_listen)
chatbot_pane_bottom_listen_btn.pack(side='right',ipadx=12)

chatbot_pane_bottom_send_btn=ttk.Label(chatbot_pane_bottom,background='#212D3B',cursor='hand2',compound='center',image=img_send)
chatbot_pane_bottom_send_btn.pack(side='right',ipadx=2)
   
chatbot_pane_center.yview_moveto(1)
chatbot_pane_center.update_idletasks()
def save_last_pos(event):
    global lastClickX, lastClickY
    lastClickX = event.x
    lastClickY = event.y
    
def dragging(event):
    x, y = event.x - lastClickX + window.winfo_x(), event.y - lastClickY + window.winfo_y()
    window.geometry("+{0}+{1}".format(x, y))

app_bar.bind('<B1-Motion>', dragging)
app_bar.bind('<Button-1>', save_last_pos)

def minimize_window(event):
    window.overrideredirect(0)
    window.iconify()
def close_window(event):

    window.destroy()
def func_lbl_leave(event):
    close_lbl.configure(foreground='beige')
def func_lbl_enter(event):
    close_lbl.configure(foreground='orangered')
close_lbl.bind("<Enter>",func_lbl_enter)
close_lbl.bind("<Leave>",func_lbl_leave)
close_lbl.bind("<ButtonPress>",close_window)

def func_lbl_leave1(event):
    minimize_lbl.configure(foreground='beige')
def func_lbl_enter1(event):
    minimize_lbl.configure(foreground='cyan')
minimize_lbl.bind("<Enter>",func_lbl_enter1)
minimize_lbl.bind("<Leave>",func_lbl_leave1)
minimize_lbl.bind("<ButtonPress>",minimize_window)
song_title="Covid 19 Virus Model Prediction Accuracy Growth"
count=0
sliderwords =''
color_list=['#212D3B','indigo','green','teal','#2b2b2b']
def slider():
    global count,sliderwords
    text=song_title
    if count>= len(text):
        count =0
        sliderwords =''
    sliderwords += text[count]
    count +=1
    dashboard_pane_top_right_top.configure(text=sliderwords,foreground=color_list[random.randint(0,len(color_list)-1)])
    dashboard_pane_top_right_top.after(120,slider)
slider()
def update_time():
    now=time.ctime()
    time_lbl.configure(text=now)
    window.after(1,update_time)
update_time()
def winfocuse():
    if window.state() == 'normal':
        window.overrideredirect(1)
    window.after(1, winfocuse)
plotMeters(dashboard_pane_top_left)
style=ttk.Style(window)
style.theme_use('clam')
window.update()
winfocuse()
window.tk_setPalette('white')
def loadDashboard(event):
    settings_pane.place_forget()
    training_pane.place_forget()
    data_entry_pane.place_forget()
    dashboard_pane_top.place(relx=0,rely=0,relwidth=1,relheight=0.8)

def loadSettings(event):
    dashboard_pane_top.place_forget()
    training_pane.place_forget()
    data_entry_pane.place_forget()
    settings_pane.place(relx=0,rely=0,relwidth=1,relheight=0.8)
def loadTrainingPane(event):
    settings_pane.place_forget()
    dashboard_pane_top.place_forget()
    data_entry_pane.place_forget()
    training_pane.place(relx=0,rely=0,relwidth=1,relheight=0.8)

def loadDataEntryPane(event):
    settings_pane.place_forget()
    training_pane.place_forget()
    dashboard_pane_top.place_forget()
    data_entry_pane.place(relx=0,rely=0,relwidth=1,relheight=0.8)

btn_data.bind("<ButtonPress>",loadDataEntryPane)
btn_settings.bind("<ButtonPress>",loadSettings)
btn_training.bind("<ButtonPress>",loadTrainingPane)
settings_dash_btn.bind("<ButtonPress>",loadDashboard)
settings_dash_btn1.bind("<ButtonPress>",loadDashboard)
settings_dash_btn.bind("<ButtonPress>",loadDashboard)


window.mainloop()
